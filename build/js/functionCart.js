"use strict";function addDataProductToCart(){var t=document.getElementById("tbody");if(0!==t.length)for(var n=t.childNodes.length-1;0<n;n--)t.removeChild(t.childNodes[n]);function a(){return JSON.parse(localStorage.getItem("dataCart"))}localStorage.getItem("dataCart")&&a();var e=a(),o=e.length;for(var c in showQuantityGoodsInBasket(o),e)t.insertAdjacentHTML("beforeend",'\n                            <tr data-id="'.concat(e[c].id,'">\n                              <td>\n                                  <div class="media">\n                                      <div class="d-flex">\n                                          <img src="img/product/').concat(e[c].collection,"/").concat(e[c].photo,'" alt="">\n                                      </div>\n                                      <div class="media-body">\n                                          <p>').concat(e[c].name+" ("+e[c].size+")","</p>\n                                      </div>\n                                  </div>\n                              </td>\n                              <td>\n                                  <h5>$").concat(e[c].price,'</h5>\n                              </td>\n                              <td>\n                                  <div class="product_count" data-price="').concat(e[c].price,'" data-id="').concat(e[c].id,'">\n                                      <button class="reduced items-count" type="button"><i class="ti-angle-left"></i></button>\n                                      <input type="text" name="qty" size="2" maxlength="12" value="').concat(e[c].quantity,'" title="Quantity:" class="input-text qty">\n                                      <button class="increase items-count" type="button"><i class="ti-angle-right"></i></button>\n                                  </div>\n                              </td>\n                              <td>\n                                  <h5 class="product-amount" id="product-amount">$').concat(calculationAmount(e[c].quantity,e[c].price),'</h5>\n                              </td>\n                              <td>\n                                <button type="button" class="close" aria-label="Close">\n                                    <span aria-hidden="true" title="Remove goods from the basket">&times;</span>\n                                </button>\n                               </td>\n                           </tr>'))}function calculationAmount(t,n){return Number(n*t).toFixed(2)}function calculationAllProductAmount(){var t=document.getElementsByClassName("product-amount"),n=0;for(var a in t)if(void 0!==t[a].innerHTML){var e=t[a].innerHTML.split("");e.splice(0,1);var o=e.join("");n+=Number(o)}displayAllProductAmount(n.toFixed(2))}function displayAllProductAmount(t){document.getElementById("subtotal").insertAdjacentHTML("afterbegin","\n                            <h5>$".concat(t,"</h5>"))}function localStorageSet(t){localStorage.setItem("dataCart",JSON.stringify(t))}function catchChangesInBasket(){document.getElementById("tbody").addEventListener("click",function(t){var n=JSON.parse(localStorage.getItem("dataCart")),a=t.target.parentNode.parentNode.parentNode;if("SPAN"===t.target.tagName){for(var e in n)a.dataset.id===n[e].id&&(n.splice([e],1),localStorageSet(n));addDataProductToCart()}else{t.target.tagName;var o=document.getElementsByClassName("items-count");if(o)for(var c in o){if(a.parentNode.dataset.id===o[c].parentNode.dataset.id)displayCalc(calculationAmount(o[c].parentNode.children[1].value,o[c].parentNode.attributes[1].value))}}showQuantityGoodsInBasket(n.length)})}function displayCalc(t){document.getElementById("product-amount").innerHTML="$"+t}function showQuantityGoodsInBasket(t){document.getElementById("show").innerHTML=t}addDataProductToCart(),calculationAllProductAmount(),catchChangesInBasket();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
